# -*- coding: utf-8 -*-
"""통계분석시각화 - Numpy 활용하는 곳.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XdP3lOd4z4pLAPfefwN1CMQsrZUPw4GQ

# 영상 처리
"""

import cv2 #OpenCV 라이브러리를 사용하기 위한 구문
from google.colab.patches import cv2_imshow #코랩에서 시각화를 위해 필요한 구문

cv2.__version__

path = '/content/drive/MyDrive/files/eh.jpg'
image = cv2.imread(path,cv2.IMREAD_COLOR)
cv2_imshow(image)

print(type(image))

print(image.shape)

"""# 빈 이미지 만들어서 작업하기"""

import numpy as np
image = np.zeros((28,28,3),np.uint8)

cv2_imshow(image)

print(image)

image[:,:,0]=255
print(image)

image[:,:,2]=255
cv2_imshow(image)

from tensorflow import keras

data = keras.datasets.mnist.load_data()
print(type(data))
print(len(data))

train_data, test_data = data #학습터 데이터와 평가용 데이터
print(type(train_data))
print(len(train_data))

image_train, label_train = train_data #이미지 데이터와 정답 데이터
print(image_train.shape)
print(label_train.shape)

image = image_train[5]
cv2_imshow(image)

label = label_train[5]
print(label)

"""# 비슷한 데이터의 평균으로 예측하자."""

from tensorflow import keras
data = keras.datasets.mnist.load_data() #손글씨 데이터를 로딩
train_data, test_data = data #학습데이터와 평가데이터
image_train, label_train = train_data #학습이미지와 정답
image_test, label_test = test_data #평가이미지와 정답

print(image_train.shape,label_train.shape)
image_train2 = image_train.reshape(60000,-1)
print(image_train2.shape)
image_test2 = image_test.reshape(10000,-1)

from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier() #모델 생성
model.fit(image_train2,label_train) #학습(독립변수, 종속변수)

pred_value = model.predict(image_test2) #예측해 보세요.

correct = 0
for i in range(len(pred_value)):
  if pred_value[i] == label_test[i]:
    correct+=1
print(correct,"/",len(pred_value))

"""# 러프하게

동전을 던졌을 때 앞면이 나올 확률이 1/2이라고 가정하자.

동전을 100번 던졌을 때 앞면이 몇 번 나오는지 테스트를 만 번 수행하여 수행 결과를 배열로 만드시오.
"""

import random

#전제조건: 동전을 던졌을 때 앞면이 나올 확률은 1/2
#동전을 100번 던져서 앞면이 나온 횟수를 반환
def test_n(n=100):
  cnt=0
  for i in range(n):
    if random.randrange(0,2)==1:
      cnt+=1
  return cnt

na = np.zeros(100) #앞면이 몇 번 나왔는지 기록할 배열
for i in range(100000):#실험을 10만번 수행
  na[test_n()]+=1 #실험해서 앞면이 나온 원소 값을 1 증가
print(na)

import matplotlib.pyplot as plt

plt.plot(na)

"""어느 카지노에서 동전을 100번 던져서 몇 번 나오는지 배팅하는 게임이 있다.

길동이가 카지노에 가서 67번 나오는 것에 배팅을 하였는데 대박을 맞았다.

대박 맞을 확률은?

해당 카지노의 동전은 앞면이 나올 확률이 1/2라고 말할 수 있는지 검정하시오.
"""

nac = np.cumsum(na)
print(nac[33]*2/100000*100,"%")

print("평균:",np.mean(na),"표준편차:",np.std(na))

#정규분포를 표준정규분포로 전환 - 스케일조정
na2 = na-np.mean(na)
print("평균:",np.mean(na2),"표준편차:",np.std(na2))
na3 = na2/np.std(na2)
print("평균:",np.mean(na3),"표준편차:",np.std(na3))

plt.plot(na ,'ro',label='na')
plt.plot(na2,'bo',label='na2')
plt.plot(na3,'go',label='na3')
plt.legend()
plt.show()

plt.plot(na3,'go',label='na3')
plt.legend()
plt.show()